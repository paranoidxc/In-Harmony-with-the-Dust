// Code generated by goctl. DO NOT EDIT.

package model

import (
	"errors"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stringx"
	"gorm.io/gorm"
)

var (
	testGormFieldNames          = builder.RawFieldNames(&TestGorm{})
	testGormRows                = strings.Join(testGormFieldNames, ",")
	testGormRowsExpectAutoSet   = strings.Join(stringx.Remove(testGormFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), ",")
	testGormRowsWithPlaceHolder = strings.Join(stringx.Remove(testGormFieldNames, "`id`", "`create_at`", "`create_time`", "`created_at`", "`update_at`", "`update_time`", "`updated_at`"), "=?,") + "=?"
)

type (
	testGormModel interface {
		Insert(data *TestGorm) error
		FindOne(id int64) (*TestGorm, error)
		Update(data *TestGorm) error
		Delete(id int64) error
		Deletes(ids []int64) error
		FindAllByWhere(where string) ([]*TestGorm, error)
		FindAllByWhereCount(where string) (int64, error)
		FindPageByWhere(where string, page int64, limit int64) ([]*TestGorm, error)
		FindPageByWhereCount(where string) (int64, error)
	}

	defaultTestGormModel struct {
		db    *gorm.DB
		table string
	}

	TestGorm struct {
		
	ID        int64          `json:"id" gorm:"primarykey;comment:唯一id;"`                                          // 主键ID
	CreatedAt time.Time      `json:"created_at" gorm:"comment:创建时间;" time_format:"sql_datetime" time_utc:"false"` // 创建时间
	UpdatedAt time.Time      `json:"updated_at" gorm:"comment:更新时间;" time_format:"sql_datetime" time_utc:"false"` // 更新时间
	DeletedAt gorm.DeletedAt `json:"deleted_at" gorm:"index;comment:删除时间;"`                                       // 删除时间
	Text      string         `json:"text" gorm:"type:varchar(255);comment:文本;"`                                   // 文本

	}
)

func newTestGormModel(gorm *gorm.DB) *defaultTestGormModel {
	return &defaultTestGormModel{
		table: "`test_gorm`",
		db:    gorm,
	}
}

func (m *defaultTestGormModel) Delete(id int64) error {
	result := m.db.Where("`id` = ?", id).Delete(&TestGorm{})
	if result.Error != nil {
		return result.Error
	}
	return nil
}

func (m *defaultTestGormModel) Deletes(ids []int64) error {
	// 开启事务
	tx := m.db.Begin()
	// 循环遍历ids切片
	for _, id := range ids {
		// 构建条件进行删除
		result := tx.Where("`id` = ?", id).Delete(&TestGorm{})
		if result.Error != nil {
			tx.Rollback() // 发生错误时回滚事务
			return result.Error
		}
	}
	// 提交事务
	err := tx.Commit().Error
	if err != nil {
		tx.Rollback() // 提交事务发生错误时回滚
		return err
	}
	return nil
}

func (m *defaultTestGormModel) FindOne(id int64) (*TestGorm, error) {
	var resp TestGorm
	// 使用 GORM 根据ID查询记录
	result := m.db.First(&resp, id)
	if result.Error != nil {
		if errors.Is(result.Error, gorm.ErrRecordNotFound) {
			return nil, ErrNotFound
		} else {
			return nil, result.Error
		}
	}
	return &resp, nil
}

func (m *defaultTestGormModel) FindAllByWhere(where string) ([]*TestGorm, error) {
	var resp []*TestGorm
	// 使用 GORM 执行查询
	result := m.db.Where(where).Order("`id` DESC").Find(&resp)
	if result.Error != nil {
		return nil, result.Error
	}
	return resp, nil
}

func (m *defaultTestGormModel) FindAllByWhereCount(where string) (int64, error) {
	var resp int64
	// 使用 GORM 执行查询并返回计数
	result := m.db.Model(&TestGorm{}).Where(where).Count(&resp)
	if result.Error != nil {
		return 0, result.Error
	}
	return resp, nil
}

func (m *defaultTestGormModel) FindPageByWhere(where string, page int64, limit int64) ([]*TestGorm, error) {
	var resp []*TestGorm
	// 使用 GORM 执行分页查询
	result := m.db.Where(where).Offset(int((page - 1) * limit)).Limit(int(limit)).Order("`id` DESC").Find(&resp)
	if result.Error != nil {
		return nil, result.Error
	}
	return resp, nil
}

func (m *defaultTestGormModel) FindPageByWhereCount(where string) (int64, error) {
	var resp int64
	// 使用 GORM 执行查询并返回计数
	result := m.db.Model(&TestGorm{}).Where(where).Count(&resp)
	if result.Error != nil {
		return 0, result.Error
	}
	return resp, nil
}

func (m *defaultTestGormModel) Insert(data *TestGorm) error {
	result := m.db.Create(data)
	if result.Error != nil {
		return result.Error
	}
	return nil
}

func (m *defaultTestGormModel) Update(data *TestGorm) error {
	result := m.db.Model(&TestGorm{}).Where("`id` = ?", data.ID).Updates(data)
	if result.Error != nil {
		return result.Error
	}
	return nil
}

func (m *defaultTestGormModel) formatPrimary(primary any) string {
	return ""
}

func (m *defaultTestGormModel) tableName() string {
	return m.table
}
